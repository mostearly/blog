{"version":3,"sources":["webpack:///./src/pages/archives/index.tsx","webpack:///./src/component/header/index.tsx"],"names":["query","sortByDesc","a","b","props","group","edges","data","allMarkdownRemark","articles","forEach","node","fields","key","split","year","month","push","path","className","classes","archive","title","desc","length","Object","keys","sort","map","collection","counter","reduce","p","c","getYearNumber","list","post","index","item","to","slug","date","link"],"mappings":"6QAMaA,EAAQ,YA4DfC,EAAa,SAACC,EAAGC,GAAJ,OAAWD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,GAExC,mBAACC,GAAqB,IAb7BC,EAcEC,EAAUF,EAAMG,KAAKC,kBAArBF,MACFG,GAfAJ,EAAe,GAeWC,EAd1BI,SAAQ,SAAAJ,GAAS,MACCA,EAAMK,KAAKC,OAAOC,IAAIC,MAAM,KAA3CC,EADc,KACRC,EADQ,KAEhBX,EAAMU,KAAOV,EAAMU,GAAQ,IAC3BV,EAAMU,GAAMC,KAAQX,EAAMU,GAAMC,GAAS,IAC9CX,EAAMU,GAAMC,GAAOC,KAAKX,MAEnBD,GASP,OACE,gBAAC,IAAD,CAAWa,KAAK,YAAYC,UAAWC,IAAQC,QAASC,MAAM,MAC5D,gBAAC,IAAD,CAAQA,MAAM,KAAKC,KAASjB,EAAMkB,OAAX,QACtBC,OAAOC,KAAKjB,GACVkB,KAAK1B,GACL2B,KAAI,SAAAb,GAAI,OACP,2BAASI,UAAWC,IAAQS,WAAYhB,IAAKE,GAC3C,sBAAII,UAAWC,IAAQL,MACrB,4BAAOA,EAAP,KACA,wBAAMI,UAAWC,IAAQU,SAhBjB,SAACf,GAAD,OACpBU,OAAOC,KAAKX,GAAMgB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIjB,EAAKkB,GAAGT,SAAQ,GAgBxCU,CAAczB,EAASM,IAD1B,MAIDU,OAAOC,KAAKjB,EAASM,IACnBa,KAAI,SAAAZ,GAAK,OACR,sBAAIG,UAAWC,IAAQe,KAAMtB,IAAKG,GAChC,sBAAIG,UAAWC,IAAQJ,OAAQA,GAC9BP,EAASM,GAAMC,GAAOY,KAAI,SAACQ,EAAMC,GAAP,OACzB,sBAAIlB,UAAWC,IAAQkB,KAAMzB,IAAKwB,GAChC,gBAAC,OAAD,CAAME,GAAIH,EAAKzB,KAAKC,OAAO4B,MACzB,4BAAOJ,EAAKzB,KAAKC,OAAO6B,MACxB,kCACA,4BAAOL,EAAKzB,KAAKC,OAAOU,uB,sGCpFjC,aAASlB,GACtB,OACE,kBAAC,WAAD,KACE,4BAAKA,EAAMkB,OACX,uBAAGH,UAAWC,IAAQU,SAAU1B,EAAMmB,MACtC,uBAAGJ,UAAWC,IAAQsB,MACpB,kBAAC,OAAD,CAAMH,GAAG,aAAT,MACA,kBAAC,OAAD,CAAMA,GAAG,eAAT,MACA,kBAAC,OAAD,CAAMA,GAAG,SAAT","file":"component---src-pages-archives-index-tsx-37cef75f26b5b4e08c2b.js","sourcesContent":["import * as React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\nimport Container from '@/component/container'\r\nimport Header from '@/component/header'\r\nimport classes from './index.styl'\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fields: { status: { eq: true }, type: { eq: \"post\" } } }\r\n      sort: { order: DESC, fields: [fields___date] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            title\r\n            date(formatString: \"MMM Do\", locale: \"zh-cn\")\r\n            key: date(formatString: \"YYYY.MMM\", locale: \"zh-cn\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\ntype Node = {\r\n  node: {\r\n    fields: {\r\n      slug: string\r\n      title: string\r\n      key: string\r\n      date: string\r\n    }\r\n    excerpt: string\r\n  }\r\n}[]\r\n\r\ninterface PageProps {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: Node\r\n    }\r\n  }\r\n  pageContext: {\r\n    totalCount: number\r\n    pageCount: number\r\n    index: number\r\n  }\r\n}\r\ntype Group = {\r\n  [year: string]: {\r\n    [month: string]: Node\r\n  }\r\n}\r\nconst newDateToGroup = (posts: Node): Group => {\r\n  const group: Group = {}\r\n  posts.forEach(edges => {\r\n    const [year, month] = edges.node.fields.key.split('.')\r\n    if (!group[year]) group[year] = {}\r\n    if (!group[year][month]) group[year][month] = []\r\n    group[year][month].push(edges)\r\n  })\r\n  return group\r\n}\r\nconst getYearNumber = (year): number =>\r\n  Object.keys(year).reduce((p, c) => p + year[c].length, 0)\r\nconst sortByDesc = (a, b) => (a > b ? -1 : a < b ? 1 : 0)\r\n\r\nexport default (props: PageProps) => {\r\n  const { edges } = props.data.allMarkdownRemark\r\n  const articles = newDateToGroup(edges)\r\n  return (\r\n    <Container path=\"/archives\" className={classes.archive} title=\"归档\">\r\n      <Header title=\"归档\" desc={`${edges.length}篇文章`} />\r\n      {Object.keys(articles)\r\n        .sort(sortByDesc)\r\n        .map(year => (\r\n          <section className={classes.collection} key={year}>\r\n            <h2 className={classes.year}>\r\n              <span>{year}年</span>\r\n              <span className={classes.counter}>\r\n                {getYearNumber(articles[year])}篇\r\n              </span>\r\n            </h2>\r\n            {Object.keys(articles[year])\r\n              .map(month => (\r\n                <ul className={classes.list} key={month}>\r\n                  <h3 className={classes.month}>{month}</h3>\r\n                  {articles[year][month].map((post, index) => (\r\n                    <li className={classes.item} key={index}>\r\n                      <Link to={post.node.fields.slug}>\r\n                        <time>{post.node.fields.date}</time>\r\n                        <small>-</small>\r\n                        <span>{post.node.fields.title}</span>\r\n                      </Link>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ))}\r\n          </section>\r\n        ))}\r\n    </Container>\r\n  )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport classes from './index.styl'\r\nimport { Link } from 'gatsby'\r\n\r\ninterface Props {\r\n  title: string\r\n  desc: string\r\n}\r\n\r\nexport default function(props: Props) {\r\n  return (\r\n    <Fragment>\r\n      <h1>{props.title}</h1>\r\n      <p className={classes.counter}>{props.desc}</p>\r\n      <p className={classes.link}>\r\n        <Link to=\"/archives\">归档</Link>\r\n        <Link to=\"/categories\">分类</Link>\r\n        <Link to=\"/tags\">标签</Link>\r\n      </p>\r\n    </Fragment>\r\n  )\r\n}\r\n"],"sourceRoot":""}