{"componentChunkName":"component---src-templates-post-index-tsx","path":"/post/nodejs-dingshiqi-limian-de-ref-he-unref-fangfa","result":{"data":{"markdownRemark":{"html":"<h1>NodeJS定时器里面的ref和unref方法</h1>\n<p>Nodejs 的定时器返回的是一个对象，和浏览器的不一样</p>\n<p>返回的定时器对象包含<code class=\"language-text\">hafRef</code>、<code class=\"language-text\">ref</code>、<code class=\"language-text\">refresh</code>、<code class=\"language-text\">unref</code>方法</p>\n<p>调用ref()将恢复激活状态，前提是调用了unref()停止了，否则无效果</p>\n<p>refresh()方法是将定时器重新启动一次</p>\n<p>当setTimeout调用时，默认是激活状态的，<strong>需要事件循环保持活动状态直至该定时器执行完成后结束</strong>，hasRef返回为true</p>\n<p>当调用unref()后，该timer处于停止状态，<strong>如果没有其他活动事件事件循环将会停止，然后退出程序</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> timerA <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'will i run ?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出 will i run ?</span>\ntimerA<span class=\"token punctuation\">.</span><span class=\"token function\">unref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 无任何输出</span>\n<span class=\"token comment\">//setImmediate(() => {</span>\n<span class=\"token comment\">//  timerA.ref()</span>\n<span class=\"token comment\">//})</span>\n<span class=\"token comment\">// 输出 will i run ?</span>\n<span class=\"token keyword\">const</span> timerB <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enable'</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// timerA.ref()</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出 enable</span>\n<span class=\"token keyword\">const</span> timerC <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出 will i run ?</span>\n<span class=\"token comment\">// 输出 end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>如果没有其他活动事件，例如setTimeout等待时间超过当前事件的，程序将会退出。如果回调函数未执行将不会被执行</li>\n<li>如果有其他活动事件的，比如下面的800毫秒的timerC，那么timerA的回调函数将会执行</li>\n</ul>","id":"04efd62e-c731-51d9-81b4-4c720be21445","fields":{"title":"NodeJS定时器里面的ref和unref方法","tags":["NodeJS"],"category":"笔记","date":"2020-02-09T18:25:06+08:00","dateModified":"2020-02-09T18:58:10+08:00","slug":"/post/nodejs-dingshiqi-limian-de-ref-he-unref-fangfa","status":true,"comment":true},"excerpt":"NodeJS定时器里面的ref和unref方法 Nodejs…"}},"pageContext":{"slug":"/post/nodejs-dingshiqi-limian-de-ref-he-unref-fangfa","prev":{"slug":"/post/linux-quanxian-shuzi-jiedu","title":"Linux 权限数字解读","date":"2020-01-31T17:35:00+08:00","category":"笔记","tags":["Linux"],"type":"post"},"next":{"slug":"/post/wei-wslwindowssobsystemlinux-anzhuang-docker","title":"为WSL(Windows sobsystem linux)安装Docker","date":"2020-03-13T19:34:00+08:00","category":"记录","tags":[],"type":"post"}}}}