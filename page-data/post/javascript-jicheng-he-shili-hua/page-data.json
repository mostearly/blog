{"componentChunkName":"component---src-templates-post-index-tsx","path":"/post/javascript-jicheng-he-shili-hua","result":{"data":{"markdownRemark":{"html":"<h2>实例化</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> fn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target is not a function'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">target</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> instance\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>继承</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> fn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">inherit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subType<span class=\"token punctuation\">,</span> superType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>subType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'subType is not a function'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'superType is not a function'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n    prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType\n    subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用<code class=\"language-text\">Object.create</code>创建一个引用<code class=\"language-text\">superType.prototype</code>的对象是这一步的关键</p>\n<p>为什么不用<code class=\"language-text\">setPrototypeOf</code>或者直接更改<code class=\"language-text\">__protp__</code>？</p>\n<p>摘抄自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n<blockquote>\n<p>由于现代 JavaScript 引擎优化属性访问所带来的特性的关系，更改对象的 <code class=\"language-text\">[[Prototype]]</code>在<strong><em>各个</em></strong>浏览器和 JavaScript 引擎上都是一个很慢的操作。其在更改继承的性能上的影响是微妙而又广泛的，这不仅仅限于 <code class=\"language-text\">obj.__proto__ = ...</code> 语句上的时间花费，而且可能会延伸到<strong><em>任何</em></strong>代码，那些可以访问<strong><em>任何</em></strong><code class=\"language-text\">[[Prototype]]</code>已被更改的对象的代码。如果你关心性能，你应该避免设置一个对象的 <code class=\"language-text\">[[Prototype]]</code>。</p>\n</blockquote>\n<p>所以使用<code class=\"language-text\">Object.create</code>创建一个引用它的新对象是比较合适的写法</p>\n<p>结束语：因为没复习的原因好多记忆都开始遗忘，再不回忆下就没了。像这种模拟<code class=\"language-text\">new</code>关键字和<code class=\"language-text\">extends</code>关键字行为的情况在现代浏览器支持下已经荡然无存了。</p>","id":"8f5a7058-c46c-5e1e-9bf0-6ba4cbc3a296","fields":{"title":"JavaScript继承和实例化","tags":["JavaScript"],"category":"笔记","date":"2019-07-04T13:00:50+08:00","dateModified":"2019-08-20T03:59:03+08:00","slug":"/post/javascript-jicheng-he-shili-hua","status":true,"comment":true},"excerpt":"实例化 继承 使用创建一个引用的对象是这一步的关键 为什么不用或者直接更改？ 摘抄自MDN…"}},"pageContext":{"slug":"/post/javascript-jicheng-he-shili-hua","prev":{"slug":"/post/yici-huijia-zai-tiandi-de-paishe","title":"一次回家在田地的拍摄","date":"2019-06-30T01:30:54+08:00","category":"记录","tags":[],"type":"post"},"next":{"slug":"/post/shi-jing-bianqian-sixuwanqian","title":"时境变迁，思绪万千","date":"2019-08-20T02:12:11+08:00","category":"记录","tags":[],"type":"post"}}}}